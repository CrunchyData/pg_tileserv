FROM golang:1.15.5-alpine3.12

# Build ARGS
ARG VERSION="latest"

RUN mkdir /app
ADD . /app/
WORKDIR /app
RUN go build -v -ldflags "-s -w -X main.programVersion=${VERSION}"

# Multi-stage build: only copy build result and resources
FROM alpine:3.12

LABEL original_developer="Crunchy Data" \
    contributor="Just van den Broecke <justb4@gmail.com>" \
    vendor="Crunchy Data" \
	url="https://crunchydata.com" \
	release="${VERSION}" \
	org.opencontainers.image.vendor="Crunchy Data" \
	os.version="3.12"

RUN apk --no-cache add ca-certificates && mkdir /app
WORKDIR /app/
COPY --from=0 /app/pg_tileserv /app/
COPY --from=0 /app/assets /app/assets

VOLUME ["/config"]

USER 1001
EXPOSE 7800

ENTRYPOINT ["/app/pg_tileserv"]
CMD []


# To build
# docker build --build-arg VERSION=1.0.2 -t justb4/pg_tileserv:1.0.2 .

# To run
# docker run -dt -e DATABASE_URL=postgres://user:pass@host/dbname -p 7800:7800 justb4/pg_tileserv:1.0.2

# test

# Load the Natural Earth [Admin 0](https://www.naturalearthdata.com/downloads/50m-cultural-vectors/) boundaries into a table named `public.ne_50m_admin_0_countries` as the examples will attempt to load vectors from http://localhost:7800/public.ne_50m_admin_0_countries/{z}/{x}/{y}.pbf
# shp2pgsql -D -s 4326 ne_50m_admin_0_countries.shp | psql -d mvt
